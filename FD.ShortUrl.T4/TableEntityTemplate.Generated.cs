//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FD.ShortUrl.T4 {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class TableEntityTemplate : TableEntityTemplateBase {
        
        
        #line 44 "Model\TableEntityTemplate.tt"

  public string TransTableToClass(string name)
    {
        string[] words = name.ToLower().Split('_');
        string cName = string.Empty;
        for( int i = 1; i < words.Length; i++ )
        {
            cName += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1,words[i].Length - 1);
        }
        return cName;
    }

        #line default
        #line hidden
        
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 6 "Model\TableEntityTemplate.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 8 "Model\TableEntityTemplate.tt"
            this.Write("\r\nusing System.Text;\r\nusing System.Collections.Generic; \r\nusing System.Data;\r\n\r\n\r" +
                    "\nnamespace ");
            
            #line default
            #line hidden
            
            #line 14 "Model\TableEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( NameSpace ));
            
            #line default
            #line hidden
            
            #line 14 "Model\TableEntityTemplate.tt"
            this.Write("\r\n{\r\n    \r\n    [Table(\"");
            
            #line default
            #line hidden
            
            #line 17 "Model\TableEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Table.name ));
            
            #line default
            #line hidden
            
            #line 17 "Model\TableEntityTemplate.tt"
            this.Write("\")]\r\n\tpublic partial class ");
            
            #line default
            #line hidden
            
            #line 18 "Model\TableEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TransTableToClass(Table.name) ));
            
            #line default
            #line hidden
            
            #line 18 "Model\TableEntityTemplate.tt"
            this.Write("PO :IEntity\r\n\t{\t\t      \r\n        ");
            
            #line default
            #line hidden
            
            #line 20 "Model\TableEntityTemplate.tt"
        foreach (var column in Table.columns) { 
            
            #line default
            #line hidden
            
            #line 21 "Model\TableEntityTemplate.tt"
            this.Write(" \t        \t\t\t\t\t\t  \r\n         /// <summary>\r\n\t\t/// ");
            
            #line default
            #line hidden
            
            #line 23 "Model\TableEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(                column.comment == null?"":column.comment ));
            
            #line default
            #line hidden
            
            #line 23 "Model\TableEntityTemplate.tt"
            this.Write("\r\n        /// </summary>    \r\n        ");
            
            #line default
            #line hidden
            
            #line 25 "Model\TableEntityTemplate.tt"
            if(column.is_primary) { 
            
            #line default
            #line hidden
            
            #line 26 "Model\TableEntityTemplate.tt"
            this.Write("    \r\n\t\t[Key(\"seq_");
            
            #line default
            #line hidden
            
            #line 27 "Model\TableEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(                    Table.name ));
            
            #line default
            #line hidden
            
            #line 27 "Model\TableEntityTemplate.tt"
            this.Write("\")]\r\n\t\t");
            
            #line default
            #line hidden
            
            #line 28 "Model\TableEntityTemplate.tt"
            }else if(column.name == "CREATE_TIME" || column.name=="IS_DELETED"){ 
            
            #line default
            #line hidden
            
            #line 29 "Model\TableEntityTemplate.tt"
            this.Write("\t\t\r\n        [Computed]\r\n        ");
            
            #line default
            #line hidden
            
            #line 31 "Model\TableEntityTemplate.tt"
            } 
            
            #line default
            #line hidden
            
            #line 32 "Model\TableEntityTemplate.tt"
            this.Write("        public ");
            
            #line default
            #line hidden
            
            #line 32 "Model\TableEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(                GetColumnType(column) ));
            
            #line default
            #line hidden
            
            #line 32 "Model\TableEntityTemplate.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 32 "Model\TableEntityTemplate.tt"
            if(column.is_nullable && GetColumnType(column) !="String"){ 
            
            #line default
            #line hidden
            
            #line 33 "Model\TableEntityTemplate.tt"
            this.Write("?");
            
            #line default
            #line hidden
            
            #line 33 "Model\TableEntityTemplate.tt"
            } 
            
            #line default
            #line hidden
            
            #line 34 "Model\TableEntityTemplate.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 34 "Model\TableEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(                column.name ));
            
            #line default
            #line hidden
            
            #line 34 "Model\TableEntityTemplate.tt"
            this.Write("\r\n        {\r\n            get;set;\r\n        }\t\r\n\r\n    ");
            
            #line default
            #line hidden
            
            #line 39 "Model\TableEntityTemplate.tt"
        }  
            
            #line default
            #line hidden
            
            #line 40 "Model\TableEntityTemplate.tt"
            this.Write("\t\t\r\n    }\r\n}\r\n\r\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class TableEntityTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
