<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>
<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="$(ProjectDir)\bin\Debug\Oracle.ManagedDataAccess.dll" #>
<#@ import namespace="System"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Data"#>
<#@ import namespace="System.Data.SqlClient"#>
<#@ import namespace="System.Configuration" #>
<#@ assembly name="$(ProjectDir)\bin\Debug\FD.Tiny.ProjectBuilder.dll" #>
<#@ import namespace="FD.Tiny.ProjectBuilder" #>

<#+     
         public DbClient GetDbInstance()
        {
            
            DbClient db = new DbClient(new DBSetting()
            {
                ConnectionString = GetConnStr("BasDb",false),
                DBType = DBType.Oracle,
            });
            return db;
        }


         public string GetConnStr(string alais,bool isWebApp)
         {
            var configFile = "App.config";
            if(isWebApp)
                configFile = "Web.config";
            var path = Host.ResolveAssemblyReference("$(ProjectDir)"+configFile);
            var map = new ExeConfigurationFileMap { ExeConfigFilename = path };           
            var config =  ConfigurationManager.OpenMappedExeConfiguration(
                                            map,ConfigurationUserLevel.None);  
            var appSettings = config.AppSettings;  
            var connectionStrings = config.ConnectionStrings.ConnectionStrings;
 
            return connectionStrings[alais].ConnectionString;            
        } 
 #>



<#+
    public string TransTableToClass(string name)
    {
        string[] words = name.ToLower().Split('_');
        string cName = string.Empty;
        for( int i = 1; i < words.Length; i++ )
        {
            cName += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1,words[i].Length - 1);
        }
        return cName;
    }

 #>